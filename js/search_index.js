var search_data = {"index":{"searchIndex":["plaid","account","badrequesterror","category","client","connector","income","stream","info","institution","notconfigurederror","notfounderror","page","plaiderror","requestfailederror","risk","searchresultinstitution","servererror","transaction","unauthorizederror","user","webhook","all()","all()","auth()","balance()","client_id_configured?()","config()","create()","delete()","delete()","env=()","error()","error_response?()","exchange_token()","for_product()","get()","get()","get()","historical_transaction?()","income()","income?()","info()","initial_transaction?()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","load()","merge()","mfa?()","mfa?()","mfa_step()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","normal_transaction?()","patch()","pending?()","post()","removed_transaction?()","removed_transactions_ids()","risk()","risk?()","search()","search_by_id()","secret_configured?()","symbolize_hash()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","transactions()","type()","update()","update_from()","update_webhook()","upgrade()","user_webhook_updated?()","changelog","contributing","license","readme","upgrading"],"longSearchIndex":["plaid","plaid::account","plaid::badrequesterror","plaid::category","plaid::client","plaid::connector","plaid::income","plaid::income::stream","plaid::info","plaid::institution","plaid::notconfigurederror","plaid::notfounderror","plaid::page","plaid::plaiderror","plaid::requestfailederror","plaid::risk","plaid::searchresultinstitution","plaid::servererror","plaid::transaction","plaid::unauthorizederror","plaid::user","plaid::webhook","plaid::category::all()","plaid::institution::all()","plaid::user#auth()","plaid::user#balance()","plaid::client#client_id_configured?()","plaid::config()","plaid::user::create()","plaid::connector#delete()","plaid::user#delete()","plaid::client#env=()","plaid::webhook#error()","plaid::webhook#error_response?()","plaid::user::exchange_token()","plaid::user#for_product()","plaid::category::get()","plaid::connector#get()","plaid::institution::get()","plaid::webhook#historical_transaction?()","plaid::user#income()","plaid::webhook#income?()","plaid::user#info()","plaid::webhook#initial_transaction?()","plaid::account#inspect()","plaid::category#inspect()","plaid::income#inspect()","plaid::income::stream#inspect()","plaid::info#inspect()","plaid::institution#inspect()","plaid::risk#inspect()","plaid::searchresultinstitution#inspect()","plaid::transaction#inspect()","plaid::webhook#inspect()","plaid::user::load()","plaid::account::merge()","plaid::connector#mfa?()","plaid::user#mfa?()","plaid::user#mfa_step()","plaid::account#name()","plaid::account::new()","plaid::category::new()","plaid::client::new()","plaid::connector::new()","plaid::income::new()","plaid::income::stream::new()","plaid::info::new()","plaid::institution::new()","plaid::page::new()","plaid::plaiderror::new()","plaid::risk::new()","plaid::searchresultinstitution::new()","plaid::transaction::new()","plaid::user::new()","plaid::webhook::new()","plaid::webhook#normal_transaction?()","plaid::connector#patch()","plaid::transaction#pending?()","plaid::connector#post()","plaid::webhook#removed_transaction?()","plaid::webhook#removed_transactions_ids()","plaid::user#risk()","plaid::webhook#risk?()","plaid::institution::search()","plaid::institution::search_by_id()","plaid::client#secret_configured?()","plaid::symbolize_hash()","plaid::account#to_s()","plaid::category#to_s()","plaid::income#to_s()","plaid::income::stream#to_s()","plaid::info#to_s()","plaid::institution#to_s()","plaid::risk#to_s()","plaid::searchresultinstitution#to_s()","plaid::transaction#to_s()","plaid::webhook#to_s()","plaid::user#transactions()","plaid::webhook#type()","plaid::user#update()","plaid::account#update_from()","plaid::user#update_webhook()","plaid::user#upgrade()","plaid::webhook#user_webhook_updated?()","","","","",""],"info":[["Plaid","","classes/Plaid.html","","<p>The Plaid namespace.\n"],["Plaid::Account","","classes/Plaid/Account.html","","<p>Representation of user account data.\n"],["Plaid::BadRequestError","","classes/Plaid/BadRequestError.html","","<p>Exception which is thrown when Plaid API returns a 400 response.\n"],["Plaid::Category","","classes/Plaid/Category.html","","<p>A class which encapsulates information about a Plaid category.\n"],["Plaid::Client","","classes/Plaid/Client.html","","<p>A class encapsulating client_id, secret, and Plaid API URL.\n"],["Plaid::Connector","","classes/Plaid/Connector.html","","<p>A class encapsulating HTTP requests to the Plaid API servers\n"],["Plaid::Income","","classes/Plaid/Income.html","","<p>Representation of Income data.\n"],["Plaid::Income::Stream","","classes/Plaid/Income/Stream.html","","<p>The class encapsulating an income stream.\n"],["Plaid::Info","","classes/Plaid/Info.html","","<p>Representation of user information.\n"],["Plaid::Institution","","classes/Plaid/Institution.html","","<p>A class encapsulating information about a Financial Institution supported\nby Plaid.\n"],["Plaid::NotConfiguredError","","classes/Plaid/NotConfiguredError.html","","<p>Exception to throw when there are configuration problems\n"],["Plaid::NotFoundError","","classes/Plaid/NotFoundError.html","","<p>Exception which is thrown when Plaid API returns a 404 response.\n"],["Plaid::Page","","classes/Plaid/Page.html","","<p>A page of results.\n"],["Plaid::PlaidError","","classes/Plaid/PlaidError.html","","<p>Base class for Plaid errors\n"],["Plaid::RequestFailedError","","classes/Plaid/RequestFailedError.html","","<p>Exception which is thrown when Plaid API returns a 402 response.\n"],["Plaid::Risk","","classes/Plaid/Risk.html","","<p>Representation of risk data (per account).\n"],["Plaid::SearchResultInstitution","","classes/Plaid/SearchResultInstitution.html","","<p>A class encapsulating information about a Financial Institution supported\nby Plaid.\n"],["Plaid::ServerError","","classes/Plaid/ServerError.html","","<p>Exception which is thrown when Plaid API returns a response which is\nneither 2xx, nor 4xx. Presumably …\n"],["Plaid::Transaction","","classes/Plaid/Transaction.html","","<p>Representation of a transaction.\n"],["Plaid::UnauthorizedError","","classes/Plaid/UnauthorizedError.html","","<p>Exception which is thrown when Plaid API returns a 401 response.\n"],["Plaid::User","","classes/Plaid/User.html","","<p>A class which encapsulates the authenticated user for all Plaid products.\n"],["Plaid::Webhook","","classes/Plaid/Webhook.html","","<p>Representation of a webhook.\n"],["all","Plaid::Category","classes/Plaid/Category.html#method-c-all","(client: nil)","<p>Get information about all available categories.\n<p>Does a GET /categories call.\n<p>client &mdash; The Plaid::Client instance …\n"],["all","Plaid::Institution","classes/Plaid/Institution.html#method-c-all","(count: 50, offset: 0, products: nil, client: nil)","<p>Get information about the Financial Institutions currently supported by\nPlaid.\n<p>Does a POST /institutions/all …\n"],["auth","Plaid::User","classes/Plaid/User.html#method-i-auth","(sync: false)","<p>Get auth information for the user (routing numbers for accounts).\n<p>Not only this method returns the new …\n"],["balance","Plaid::User","classes/Plaid/User.html#method-i-balance","()","<p>Get current account balance.\n<p>Does a POST /balance request.\n<p>Returns\n"],["client_id_configured?","Plaid::Client","classes/Plaid/Client.html#method-i-client_id_configured-3F","()","<p>Check if client_id is configured.\n<p>Returns\n<p>Returns true if it is.\n"],["config","Plaid","classes/Plaid.html#method-c-config","()","<p>A helper function to ease configuration.\n<p>Yields self.\n<p>Examples\n"],["create","Plaid::User","classes/Plaid/User.html#method-c-create","(product, institution, username, password, pin: nil, options: nil, client: nil)","<p>Create (add) a user.\n<p>product &mdash; The Symbol product name you are adding the user to, one of Plaid::PRODUCTS\n…\n"],["delete","Plaid::Connector","classes/Plaid/Connector.html#method-i-delete","(payload)","<p>Run DELETE request.\n<p>Adds client_id and secret to the payload if @auth is true.\n<p>payload &mdash; The Hash with data. …\n"],["delete","Plaid::User","classes/Plaid/User.html#method-i-delete","()","<p>Delete the user.\n<p>Makes a delete request and freezes self to prevent further modifications to\nthe object. …\n"],["env=","Plaid::Client","classes/Plaid/Client.html#method-i-env-3D","(env)","<p>Set Plaid environment to use.\n<p>env &mdash; The Symbol (:tartan, :production), or a full String URL like\n&#39;tartan.plaid.com …\n\n"],["error","Plaid::Webhook","classes/Plaid/Webhook.html#method-i-error","()","<p>Get a Plaid::Error instance if this is an Error Response Webhook\n<p>Returns\n<p>Returns Plaid::Error or nil\n"],["error_response?","Plaid::Webhook","classes/Plaid/Webhook.html#method-i-error_response-3F","()","<p>Detect if the webhook is Error Response Webhook. Triggered when an error\nhas occurred. Includes the relevant …\n"],["exchange_token","Plaid::User","classes/Plaid/User.html#method-c-exchange_token","(public_token, account_id = nil, product: :connect, client: nil)","<p>Exchange a Link public_token for an API access_token.\n<p>The account_id parameter is required if you wish …\n"],["for_product","Plaid::User","classes/Plaid/User.html#method-i-for_product","(product)","<p>Get the current user tied to another product.\n<p>No API request is made, just the current product is changed. …\n"],["get","Plaid::Category","classes/Plaid/Category.html#method-c-get","(id, client: nil)","<p>Get information about a given category.\n<p>Does a GET /categories/:id call.\n<p>id &mdash; the String category ID (e.g. …\n"],["get","Plaid::Connector","classes/Plaid/Connector.html#method-i-get","(payload = {})","<p>Run GET request.\n<p>Returns\n<p>Returns the parsed JSON response body.\n"],["get","Plaid::Institution","classes/Plaid/Institution.html#method-c-get","(id, client: nil)","<p>Get information about a given Financial Institution.\n<p>Does a GET /institutions/all/:id call.\n<p>id &mdash; the String …\n"],["historical_transaction?","Plaid::Webhook","classes/Plaid/Webhook.html#method-i-historical_transaction-3F","()","<p>Detect if the webhook is Historical Transaction Webhook. Occurs once the\nhistorical transaction pull …\n"],["income","Plaid::User","classes/Plaid/User.html#method-i-income","(sync: false)","<p>Get income information for the user.\n<p>Does a POST /income/get request.\n<p>sync &mdash; The Boolean flag which, if true, …\n"],["income?","Plaid::Webhook","classes/Plaid/Webhook.html#method-i-income-3F","()","<p>Detect if the webhook is Income. Occurs when Income data is ready.\n<p>Returns\n<p>Returns true if it is.\n"],["info","Plaid::User","classes/Plaid/User.html#method-i-info","(sync: false)","<p>Get info for the user.\n<p>Does a POST /info/get request.\n<p>sync &mdash; The Boolean flag which, if true, causes information …\n"],["initial_transaction?","Plaid::Webhook","classes/Plaid/Webhook.html#method-i-initial_transaction-3F","()","<p>Detect if the webhook is Initial Transaction Webhook. Occurs once the\ninitial transaction pull has finished. …\n"],["inspect","Plaid::Account","classes/Plaid/Account.html#method-i-inspect","()","<p>Get a String representation of the account.\n<p>Returns\n<p>Returns a String.\n"],["inspect","Plaid::Category","classes/Plaid/Category.html#method-i-inspect","()","<p>Get a String representation of Category.\n<p>Returns\n<p>Returns a String.\n"],["inspect","Plaid::Income","classes/Plaid/Income.html#method-i-inspect","()","<p>Get a String representation of Income.\n<p>Returns\n<p>Returns a String.\n"],["inspect","Plaid::Income::Stream","classes/Plaid/Income/Stream.html#method-i-inspect","()","<p>Get a String representation of the Stream.\n<p>Returns\n<p>Returns a String.\n"],["inspect","Plaid::Info","classes/Plaid/Info.html#method-i-inspect","()","<p>Get a String representation of Info object.\n<p>Returns\n<p>Returns a String.\n"],["inspect","Plaid::Institution","classes/Plaid/Institution.html#method-i-inspect","()","<p>Get a String representation of the institution.\n<p>Returns\n<p>Returns a String.\n"],["inspect","Plaid::Risk","classes/Plaid/Risk.html#method-i-inspect","()","<p>Get a String representation of Risk.\n<p>Returns\n<p>Returns a String.\n"],["inspect","Plaid::SearchResultInstitution","classes/Plaid/SearchResultInstitution.html#method-i-inspect","()","<p>Get a String representation of the institution.\n<p>Returns\n<p>Returns a String.\n"],["inspect","Plaid::Transaction","classes/Plaid/Transaction.html#method-i-inspect","()","<p>Get a String representation of the transaction.\n<p>Returns\n<p>Returns a String.\n"],["inspect","Plaid::Webhook","classes/Plaid/Webhook.html#method-i-inspect","()","<p>Get a String representation of the transaction.\n<p>Returns\n<p>Returns a String.\n"],["load","Plaid::User","classes/Plaid/User.html#method-c-load","(product, token, client: nil)","<p>Get User instance in case user access token is known.\n<p>No requests are made, but the returned User instance …\n"],["merge","Plaid::Account","classes/Plaid/Account.html#method-c-merge","(accounts, new_accounts)","<p>Merge account information.\n<p>accounts &mdash; The Array of Account instances.\n<p>new_accounts &mdash; The Array of Account instances. …\n"],["mfa?","Plaid::Connector","classes/Plaid/Connector.html#method-i-mfa-3F","()","<p>Check if MFA response received.\n<p>Returns\n<p>Returns true if response has code 201.\n"],["mfa?","Plaid::User","classes/Plaid/User.html#method-i-mfa-3F","()","<p>Find out if MFA is required based on last request.\n<p>After calling e.g. User.create you might need to make …\n"],["mfa_step","Plaid::User","classes/Plaid/User.html#method-i-mfa_step","(info = nil, send_method: nil, options: nil)","<p>Submit MFA information.\n<p>info &mdash; The String with MFA information (default: nil).\n<p>send_method &mdash; The Hash with …\n"],["name","Plaid::Account","classes/Plaid/Account.html#method-i-name","()","<p>Get the account name.\n<p>The name is obtained from #meta Hash.\n<p>Returns\n"],["new","Plaid::Account","classes/Plaid/Account.html#method-c-new","(hash)",""],["new","Plaid::Category","classes/Plaid/Category.html#method-c-new","(fields)","<p>Initialize a Category with given fields.\n"],["new","Plaid::Client","classes/Plaid/Client.html#method-c-new","(env: nil, client_id: nil, secret: nil)","<p>Construct a Client instance.\n<p>env &mdash; The Symbol (:tartan, :production), or a full String URL like\n&#39;tartan.plaid.com …\n"],["new","Plaid::Connector","classes/Plaid/Connector.html#method-c-new","(path, subpath = nil, auth: false, client: nil)","<p>Prepare to run request.\n<p>path &mdash; The String path without leading slash. E.g. &#39;connect&#39;\n<p>subpath &mdash; The …\n"],["new","Plaid::Income","classes/Plaid/Income.html#method-c-new","(fields)",""],["new","Plaid::Income::Stream","classes/Plaid/Income/Stream.html#method-c-new","(fields)","<p>Initialize a Stream.\n<p>fields &mdash; The Hash with fields (keys are Strings).\n\n"],["new","Plaid::Info","classes/Plaid/Info.html#method-c-new","(fields)","<p>Construct the Info object.\n"],["new","Plaid::Institution","classes/Plaid/Institution.html#method-c-new","(fields)","<p>Initialize an Institution with given fields.\n"],["new","Plaid::Page","classes/Plaid/Page.html#method-c-new","(total_count, records)",""],["new","Plaid::PlaidError","classes/Plaid/PlaidError.html#method-c-new","(code, message, resolve)","<p>Initialize a error with proper attributes.\n<p>code &mdash; The Integer code (e.g. 1501).\n<p>message &mdash; The String message, …\n"],["new","Plaid::Risk","classes/Plaid/Risk.html#method-c-new","(fields)","<p>Construct a Risk object.\n<p>fields &mdash; The Hash with fields.\n\n"],["new","Plaid::SearchResultInstitution","classes/Plaid/SearchResultInstitution.html#method-c-new","(hash)","<p>Initialize the SearchResultInstitution instance.\n"],["new","Plaid::Transaction","classes/Plaid/Transaction.html#method-c-new","(fields)","<p>Initialize a Transaction instance.\n<p>fields &mdash; The Hash with fields.\n\n"],["new","Plaid::User","classes/Plaid/User.html#method-c-new","(product, access_token: nil, response: nil, mfa: nil, stripe_token: nil, client: nil)","<p>Initialize a User instance.\n<p>product &mdash; The Symbol product name.\n<p>access_token &mdash; The String access token obtained …\n"],["new","Plaid::Webhook","classes/Plaid/Webhook.html#method-c-new","(fields)","<p>Initialize a Webhook instance.\n<p>fields &mdash; The Hash with fields.\n\n"],["normal_transaction?","Plaid::Webhook","classes/Plaid/Webhook.html#method-i-normal_transaction-3F","()","<p>Detect if the webhook is Normal Transaction Webhook. Occurs at set\nintervals throughout the day as data …\n"],["patch","Plaid::Connector","classes/Plaid/Connector.html#method-i-patch","(payload)","<p>Run PATCH request.\n<p>Adds client_id and secret to the payload if @auth is true.\n<p>payload &mdash; The Hash with data. …\n"],["pending?","Plaid::Transaction","classes/Plaid/Transaction.html#method-i-pending-3F","()","<p>Detect if the transaction is pending or unsettled.\n<p>Returns\n<p>Returns true if it is.\n"],["post","Plaid::Connector","classes/Plaid/Connector.html#method-i-post","(payload)","<p>Run POST request.\n<p>Adds client_id and secret to the payload if @auth is true.\n<p>payload &mdash; The Hash with data. …\n"],["removed_transaction?","Plaid::Webhook","classes/Plaid/Webhook.html#method-i-removed_transaction-3F","()","<p>Detect if the webhook is Removed Transaction Webhook. Occurs when\ntransactions have been removed from …\n"],["removed_transactions_ids","Plaid::Webhook","classes/Plaid/Webhook.html#method-i-removed_transactions_ids","()","<p>Get transaction IDs that were removed.\n<p>Returns\n<p>Returns Array or nil\n"],["risk","Plaid::User","classes/Plaid/User.html#method-i-risk","(sync: false)","<p>Get risk data for the user&#39;s accounts.\n<p>Does a POST /risk/get request.\n<p>sync &mdash; The Boolean flag which, …\n"],["risk?","Plaid::Webhook","classes/Plaid/Webhook.html#method-i-risk-3F","()","<p>Detect if the webhook is Risk. Occurs when Risk data is ready.\n<p>Returns\n<p>Returns true if it is.\n"],["search","Plaid::Institution","classes/Plaid/Institution.html#method-c-search","(query: nil, product: nil, client: nil)","<p>Search Financial Institutions.\n<p>query &mdash; The String search query to match against the full list of institutions. …\n"],["search_by_id","Plaid::Institution","classes/Plaid/Institution.html#method-c-search_by_id","(id, client: nil)","<p>Lookup a Financial Institution by ID.\n<p>Does a GET /institutions/all/search call with id param.\n<p>id &mdash; the String …\n"],["secret_configured?","Plaid::Client","classes/Plaid/Client.html#method-i-secret_configured-3F","()","<p>Check if client_id is configured.\n<p>Returns\n<p>Returns true if it is.\n"],["symbolize_hash","Plaid","classes/Plaid.html#method-c-symbolize_hash","(hash, values: false)","<p>Symbolize keys (and values) for a hash.\n<p>hash &mdash; The Hash with string keys (or nil).\n<p>values &mdash; The Boolean flag …\n"],["to_s","Plaid::Account","classes/Plaid/Account.html#method-i-to_s","()","<p>Get a String representation of the account.\n<p>Returns\n<p>Returns a String.\n"],["to_s","Plaid::Category","classes/Plaid/Category.html#method-i-to_s","()","<p>Get a String representation of Category.\n<p>Returns\n<p>Returns a String.\n"],["to_s","Plaid::Income","classes/Plaid/Income.html#method-i-to_s","()","<p>Get a String representation of Income.\n<p>Returns\n<p>Returns a String.\n"],["to_s","Plaid::Income::Stream","classes/Plaid/Income/Stream.html#method-i-to_s","()","<p>Get a String representation of the Stream.\n<p>Returns\n<p>Returns a String.\n"],["to_s","Plaid::Info","classes/Plaid/Info.html#method-i-to_s","()","<p>Get a String representation of Info object.\n<p>Returns\n<p>Returns a String.\n"],["to_s","Plaid::Institution","classes/Plaid/Institution.html#method-i-to_s","()","<p>Get a String representation of the institution.\n<p>Returns\n<p>Returns a String.\n"],["to_s","Plaid::Risk","classes/Plaid/Risk.html#method-i-to_s","()","<p>Get a String representation of Risk.\n<p>Returns\n<p>Returns a String.\n"],["to_s","Plaid::SearchResultInstitution","classes/Plaid/SearchResultInstitution.html#method-i-to_s","()","<p>Get a String representation of the institution.\n<p>Returns\n<p>Returns a String.\n"],["to_s","Plaid::Transaction","classes/Plaid/Transaction.html#method-i-to_s","()","<p>Get a String representation of the transaction.\n<p>Returns\n<p>Returns a String.\n"],["to_s","Plaid::Webhook","classes/Plaid/Webhook.html#method-i-to_s","()","<p>Get a String representation of the transaction.\n<p>Returns\n<p>Returns a String.\n"],["transactions","Plaid::User","classes/Plaid/User.html#method-i-transactions","(pending: false, account_id: nil, start_date: nil, end_date: nil)","<p>Get transactions.\n<p>Does a /connect/get call. Updates self.accounts with latest information.\n<p>pending &mdash; the …\n"],["type","Plaid::Webhook","classes/Plaid/Webhook.html#method-i-type","()","<p>Share the type of Webhook this is from its code\n<p>Returns\n<p>Returns String webhook type\n"],["update","Plaid::User","classes/Plaid/User.html#method-i-update","(username, password, pin = nil)","<p>Update user credentials.\n<p>Updates the user credentials for the current product. See User#for_product.\n<p>username … &mdash; "],["update_from","Plaid::Account","classes/Plaid/Account.html#method-i-update_from","(another)","<p>Update account information.\n<p>All fields which are not nil in another are copied to self.\n<p>another &mdash; The Account …\n"],["update_webhook","Plaid::User","classes/Plaid/User.html#method-i-update_webhook","(webhook)","<p>Create or update the webhook for Connect.\n<p>Does a PATCH /connect request.\n<p>webhook &mdash; The String with webhook …\n"],["upgrade","Plaid::User","classes/Plaid/User.html#method-i-upgrade","(product)","<p>Upgrade the user.\n<p>For an existing user that has been added via any of products (:connect,\n:auth, :income, …\n"],["user_webhook_updated?","Plaid::Webhook","classes/Plaid/Webhook.html#method-i-user_webhook_updated-3F","()","<p>Detect if the webhook is User&#39;s Webhook Updated. Occurs when an\nuser&#39;s webhook is updated via …\n"],["CHANGELOG","","files/CHANGELOG_md.html","","<p>3.0.0. 17-Jan-2017\n<p>Add <code>/institutions/all</code> and\n<code>/institutions/all/search</code> endpoints, see UPGRADING.md\n\n<p>2.2.0. …\n"],["CONTRIBUTING","","files/CONTRIBUTING_md.html","","<p>Contributing\n<p>Make one or more atomic commits, and ensure that each commit has\na\ndescriptive commit message. ...\n"],["LICENSE","","files/LICENSE.html","","<p>The MIT License (MIT)\n<p>Copyright © 2016 Plaid Technologies, Inc.\n<p>Permission is hereby granted, free of …\n"],["README","","files/README_md.html","","<p>plaid-ruby-legacy <img src=\"https://circleci.com/gh/plaid/plaid-ruby-legacy.svg?style=svg&circle-token=f8f8fa32c0eeac3b66473c623596d067ee50f899\"> …\n"],["UPGRADING","","files/UPGRADING_md.html","","<p>Upgrading from 2.x.x to 3.0.0\n<p>Version 3.0.0 makes <code>Plaid::Institution</code> use new\n<code>institutions/all</code> endpoint …\n"]]}}